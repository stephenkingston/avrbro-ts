{"version":3,"sources":["../src/boards.ts","../src/hex-parser.ts","../src/utils.ts","../src/stk500v1/constants.ts","../src/stk500v1/stk500-io.ts","../src/stk500v1/stk500.ts","../src/avrbro.ts"],"sourcesContent":["/**\n* Grabbed on https://github.com/noopkat/avrgirl-arduino\n*/\n\nexport interface Board {\n  name: string;\n  baud: number;\n  signature: number[];\n  pageSize?: number;\n  numPages?: number;\n  timeout?: number;\n  productId?: string[];\n  productPage: string;\n  protocol: string;\n  aliases?: string[];\n  delay1?: number;\n  delay2?: number;\n  stabDelay?: number;\n  cmdexeDelay?: number;\n  synchLoops?: number;\n  byteDelay?: number;\n  pollValue?: number;\n  pollIndex?: number;\n}\n\nexport const boards: Board[] = [\n  {\n    name: 'uno',\n    baud: 115200,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x0043', '0x7523', '0x0001', '0xea60'],\n    productPage: 'https://store.arduino.cc/arduino-uno-rev3',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'micro',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0037', '0x8037', '0x0036', '0x0237'],\n    productPage: 'https://store.arduino.cc/arduino-micro',\n    protocol: 'avr109'\n  },\n  {\n    name: 'imuduino',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0036', '0x8037', '0x8036'],\n    productPage: 'https://www.kickstarter.com/projects/1265095814/imuduino-wireless-3d-motion-html-js-apps-arduino-p?lang=de',\n    protocol: 'avr109'\n  },\n  {\n    name: 'leonardo',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0036', '0x8036', '0x800c'],\n    productPage: 'https://store.arduino.cc/leonardo',\n    protocol: 'avr109'\n  },\n  {\n    name: 'arduboy',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0036', '0x8036', '0x800c'],\n    productPage: 'https://arduboy.com/',\n    protocol: 'avr109'\n  },\n  {\n    name: 'feather',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x800c', '0x000c'],\n    productPage: 'https://www.adafruit.com/feather',\n    protocol: 'avr109'\n  },\n  {\n    name: 'little-bits',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0036', '0x8036'],\n    productPage: 'https://littlebits.com/collections/bits-and-accessories/products/arduino-bit',\n    protocol: 'avr109'\n  },\n  {\n    name: 'blend-micro',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x2404'],\n    productPage: 'https://redbear.cc/product/retired/blend-micro.html',\n    protocol: 'avr109'\n  },\n  {\n    name: 'nano',\n    baud: 57600,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6001', '0x7523'],\n    productPage: 'https://web.archive.org/web/20150813095112/https://www.arduino.cc/en/Main/ArduinoBoardNano',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'nano (new bootloader)',\n    baud: 115200,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6001', '0x7523'],\n    productPage: 'https://store.arduino.cc/arduino-nano',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'duemilanove168',\n    baud: 19200,\n    signature: [0x1e, 0x94, 0x06],\n    pageSize: 128,\n    numPages: 128,\n    timeout: 400,\n    productId: ['0x6001'],\n    productPage: 'https://www.arduino.cc/en/Main/arduinoBoardDuemilanove',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'duemilanove328',\n    baud: 57600,\n    signature: [0x1e, 0x95, 0x14],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6001'],\n    productPage: 'https://www.arduino.cc/en/Main/arduinoBoardDuemilanove',\n    protocol: 'stk500v1'\n  },\n  // the alias is here because of an accidental naming change of the tinyduino\n  // keeping in for backwards compatibility (SHA 05d65842)\n  {\n    name: 'tinyduino',\n    baud: 57600,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6015'],\n    productPage: 'https://tinycircuits.com/pages/tinyduino-overview',\n    protocol: 'stk500v1',\n    aliases: ['tinduino']\n  },\n  {\n    name: 'mega',\n    baud: 115200,\n    signature: [0x1e, 0x98, 0x01], // ATmega2560\n    pageSize: 256,\n    delay1: 10,\n    delay2: 1,\n    timeout:0xc8,\n    stabDelay:0x64,\n    cmdexeDelay:0x19,\n    synchLoops:0x20,\n    byteDelay:0x00,\n    pollValue:0x53,\n    pollIndex:0x03,\n    productId: ['0x0042', '0x6001', '0x0010', '0x7523'],\n    productPage: 'https://store.arduino.cc/mega-2560-r3',\n    protocol: 'stk500v2'\n  },\n  {\n    name: 'adk',\n    baud: 115200,\n    signature: [0x1e, 0x98, 0x01], // ATmega2560\n    pageSize: 256,\n    delay1: 10,\n    delay2: 1,\n    timeout:0xc8,\n    stabDelay:0x64,\n    cmdexeDelay:0x19,\n    synchLoops:0x20,\n    byteDelay:0x00,\n    pollValue:0x53,\n    pollIndex:0x03,\n    productId: ['0x0044', '0x6001', '0x003F'],\n    productPage: 'https://store.arduino.cc/arduino-mega-adk-rev3',\n    protocol: 'stk500v2'\n  },\n  {\n    name: 'sf-pro-micro',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x9206', '0x9205'],\n    productPage: 'https://www.sparkfun.com/products/12640',\n    protocol: 'avr109'\n  },\n  {\n    name: 'pro-mini',\n    baud: 57600,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productPage: 'https://store.arduino.cc/arduino-pro-mini',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'qduino',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x516d', '0x514d'],\n    productPage: 'https://www.sparkfun.com/products/13614',\n    protocol: 'avr109'\n  },\n  {\n    name: 'pinoccio',\n    baud: 115200,\n    signature: [0x1e, 0xa8, 0x02], // ATmega256RFR2\n    pageSize: 256,\n    delay1: 10,\n    delay2: 1,\n    timeout:0xc8,\n    stabDelay:0x64,\n    cmdexeDelay:0x19,\n    synchLoops:0x20,\n    byteDelay:0x00,\n    pollValue:0x53,\n    pollIndex:0x03,\n    productId: ['0x6051'],\n    productPage: 'https://www.mouser.de/new/crowd-supply/crowd-supply-pinoccio-microcontroller/',\n    protocol: 'stk500v2'\n  },\n  {\n    name: 'lilypad-usb',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x9207', '0x9208', '0x1B4F'],\n    productPage: 'https://www.sparkfun.com/products/12049',\n    protocol: 'avr109'\n  },\n  {\n    name: 'yun',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0041', '0x8041'],\n    productPage: 'https://store.arduino.cc/arduino-yun',\n    protocol: 'avr109'\n  },\n  {\n    name: 'esplora',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x003C', '0x803C'],\n    productPage: 'https://store.arduino.cc/arduino-esplora',\n    protocol: 'avr109'\n  },\n  {\n    name: 'circuit-playground-classic',\n    baud: 57600,\n    signature: [0x43, 0x41, 0x54, 0x45, 0x52, 0x49, 0x4e],\n    productId: ['0x0011', '0x8011'],\n    productPage: 'https://www.adafruit.com/product/3000',\n    protocol: 'avr109'\n  },\n  /** BQ - Arduino Based Boards. Used in Bitbloq -> bitbloq.bq.com and Arduino IDE*/\n  {\n    name: 'zumjunior',\n    baud: 115200,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0xEA60'],\n    productPage: 'https://store-de.bq.com/de/zum-kit-junior',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'zumcore2',\n    baud: 115200,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0xEA60'],\n    productPage: 'https://www.bq.com/de/zum-core-2-0',\n    protocol: 'stk500v1'\n  },\n  {\n    name: 'bqZum',\n    baud: 19200,\n    signature: [0x1e, 0x95, 0x0f],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x6001', '0x7523'],\n    productPage: 'http://diwo.bq.com/zum-bt-328-especificaciones-tecnicas/',\n    protocol: 'stk500v1'\n  },\n  /** END OF BQ - Arduino Based Boards. Used in Bitbloq -> bitbloq.bq.com and Arduino IDE*/\n\n  /** START OF Spark Concepts Boards - Arduino Based CNC Controller but uses Atmega328pb (Note 'pb' not 'p' = different signature) https://github.com/Spark-Concepts/xPro-V4 */\n  {\n    name: 'xprov4',\n    baud: 115200,\n    signature: [0x1e, 0x95, 0x16],\n    pageSize: 128,\n    numPages: 256,\n    timeout: 400,\n    productId: ['0x0043', '0x7523', '0x0001', '0xea60'],\n    productPage: 'http://www.spark-concepts.com/cnc-xpro-v4-controller/',\n    protocol: 'stk500v1'\n  },\n];\n\n/**\n * Get a board object by name\n */\nexport const getBoard = (name: string): Board => {\n  const filtered = boards.filter(b => (b.name === name || (b.aliases && b.aliases.indexOf(name) !== -1)));\n  if (!filtered || filtered.length === 0) {\n    throw new Error(`no board named '${name}' was found!`);\n  }\n  if (filtered.length > 1) {\n    throw new Error(`several boards named '${name}' were found!`);\n  }\n  return filtered[0];\n};\n\n","/**\n * Grabbed on https://github.com/bminer/intel-hex.js\n */\n\n//Intel Hex record types\nconst DATA = 0,\n  END_OF_FILE = 1,\n  EXT_SEGMENT_ADDR = 2,\n  START_SEGMENT_ADDR = 3,\n  EXT_LINEAR_ADDR = 4,\n  START_LINEAR_ADDR = 5,\n  EMPTY_VALUE = 0xFF;\n\ninterface IntelHexResult {\n  data: Uint8Array;\n  startSegmentAddress: number | null;\n  startLinearAddress: number | null;\n}\n\nexport const parseIntelHex = (data_u8: Uint8Array, bufferSize?: number): IntelHexResult => {\n  let data: string;\n  data = new TextDecoder().decode(data_u8);\n\n  //Initialization\n  let buf = new Uint8Array(bufferSize || 8192),\n    bufLength = 0, //Length of data in the buffer\n    highAddress = 0, //upper address\n    startSegmentAddress: number | null = null,\n    startLinearAddress: number | null = null,\n    lineNum = 0, //Line number in the Intel Hex string\n    pos = 0; //Current position in the Intel Hex string\n  const SMALLEST_LINE = 11;\n  while (pos + SMALLEST_LINE <= data.length) {\n    //Parse an entire line\n    if (data.charAt(pos++) !== ':') {\n      throw new Error(`Line ${lineNum + 1} does not start with a colon (:).`);\n    } else {\n      lineNum++;\n    }\n    //Number of bytes (hex digit pairs) in the data field\n    const dataLength = parseInt(data.substr(pos, 2), 16);\n    pos += 2;\n    //Get 16-bit address (big-endian)\n    const lowAddress = parseInt(data.substr(pos, 4), 16);\n    pos += 4;\n    //Record type\n    const recordType = parseInt(data.substr(pos, 2), 16);\n    pos += 2;\n    //Data field (hex-encoded string)\n    const dataField = data.substr(pos, dataLength * 2);\n    const dataFieldBuf = new Uint8Array(dataLength);\n    for (let i = 0; i < dataLength; i++) {\n      dataFieldBuf[i] = parseInt(dataField.substr(i * 2, 2), 16);\n    }\n    pos += dataLength * 2;\n    //Checksum\n    const checksum = parseInt(data.substr(pos, 2), 16);\n    pos += 2;\n    //Validate checksum\n    let calcChecksum = (dataLength + (lowAddress >> 8) + lowAddress + recordType) & 0xFF;\n    for (let i = 0; i < dataLength; i++) {\n      calcChecksum = (calcChecksum + dataFieldBuf[i]) & 0xFF;\n    }\n    calcChecksum = (0x100 - calcChecksum) & 0xFF;\n    if (checksum !== calcChecksum) {\n      throw new Error(\n        `Invalid checksum on line ${lineNum}: got ${checksum}, but expected ${calcChecksum}`\n      );\n    }\n    //Parse the record based on its recordType\n    switch (recordType) {\n      case DATA:\n        const absoluteAddress = highAddress + lowAddress;\n        //Expand buf, if necessary\n        if (absoluteAddress + dataLength >= buf.length) {\n          let tmp = new Uint8Array((absoluteAddress + dataLength) * 2);\n          tmp.set(buf);\n          buf = tmp;\n        }\n        //Write over skipped bytes with EMPTY_VALUE\n        if (absoluteAddress > bufLength) {\n          buf.fill(EMPTY_VALUE, bufLength, absoluteAddress);\n        }\n        //Write the dataFieldBuf to buf\n        buf.set(dataFieldBuf, absoluteAddress);\n        bufLength = Math.max(bufLength, absoluteAddress + dataLength);\n        break;\n      case END_OF_FILE:\n        if (dataLength !== 0) {\n          throw new Error(`Invalid EOF record on line ${lineNum}.`);\n        }\n        return {\n          data: buf.slice(0, bufLength),\n          startSegmentAddress,\n          startLinearAddress,\n        };\n      case EXT_SEGMENT_ADDR:\n        if (dataLength !== 2 || lowAddress !== 0) {\n          throw new Error(`Invalid extended segment address record on line ${lineNum}.`);\n        }\n        highAddress = parseInt(dataField, 16) << 4;\n        break;\n      case START_SEGMENT_ADDR:\n        if (dataLength !== 4 || lowAddress !== 0) {\n          throw new Error(`Invalid start segment address record on line ${lineNum}.`);\n        }\n        startSegmentAddress = parseInt(dataField, 16);\n        break;\n      case EXT_LINEAR_ADDR:\n        if (dataLength !== 2 || lowAddress !== 0) {\n          throw new Error(`Invalid extended linear address record on line ${lineNum}.`);\n        }\n        highAddress = parseInt(dataField, 16) << 16;\n        break;\n      case START_LINEAR_ADDR:\n        if (dataLength !== 4 || lowAddress !== 0) {\n          throw new Error(`Invalid start linear address record on line ${lineNum}.`);\n        }\n        startLinearAddress = parseInt(dataField, 16);\n        break;\n      default:\n        throw new Error(`Invalid record type (${recordType}) on line ${lineNum}.`);\n    }\n    //Advance to the next line\n    if (data.charAt(pos) === '\\r') {\n      pos++;\n    }\n    if (data.charAt(pos) === '\\n') {\n      pos++;\n    }\n  }\n  throw new Error(`Unexpected end of input: missing or invalid EOF record.`);\n};\n","export const bufferEqual = (a: Uint8Array, b: Uint8Array): boolean => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n","export const Resp_STK_INSYNC = 0x14;\nexport const Resp_STK_OK = 0x10;\n\nexport default {\n  Cmnd_STK_GET_SYNC: 0x30,\n  Cmnd_STK_SET_DEVICE: 0x42,\n  Cmnd_STK_ENTER_PROGMODE: 0x50,\n  Cmnd_STK_LOAD_ADDRESS: 0x55,\n  Cmnd_STK_PROG_PAGE: 0x64,\n  Cmnd_STK_LEAVE_PROGMODE: 0x51,\n  Cmnd_STK_READ_SIGN: 0x75,\n\n  Sync_CRC_EOP: 0x20,\n\n  Resp_STK_OK: 0x10,\n  Resp_STK_INSYNC: 0x14,\n  Resp_STK_NOSYNC: 0x15,\n\n  Cmnd_STK_READ_PAGE: 0x74,\n\n  OK_RESPONSE: new Uint8Array([Resp_STK_INSYNC, Resp_STK_OK])\n};\n","import { bufferEqual } from '../utils';\nimport Statics from './constants';\n\nexport const receiveData = async (reader: any, timeout: number, responseLength: number): Promise<Uint8Array> => {\n  const startingBytes = [Statics.Resp_STK_INSYNC];\n  \n  let buffer = new Uint8Array(0);\n  let started = false;\n  let timeoutId: NodeJS.Timeout | null = null;\n  let isReading = false;\n  let error: Error | null = null;\n\n  const finished = (err?: Error) => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n    isReading = false;\n    error = err || null;\n  };\n\n  const handleChunk = (data: Uint8Array) => {\n    let index = 0;\n    while (!started && index < data.length) {\n      const byte = data[index];\n      if (startingBytes.indexOf(byte) !== -1) {\n        data = data.slice(index, data.length - index);\n        started = true;\n      }\n      index++;\n    }\n    if (started) {\n      buffer = new Uint8Array([...buffer, ...data]);\n    }\n    if (buffer.length > responseLength) {\n      finished(new Error(`buffer overflow ${buffer.length} > ${responseLength}`));\n    } else if (buffer.length === responseLength) {\n      finished();\n    }\n  };\n\n  if (timeout && timeout > 0) {\n    timeoutId = setTimeout(() => {\n      timeoutId = null;\n      finished(new Error(`receiveData timeout after ${timeout}ms`));\n    }, timeout);\n  }\n\n  if (reader) {\n    isReading = true;\n    while (isReading) {\n      try {\n        const { value, done } = await reader.read();\n        if (done) {\n          break;\n        }\n        handleChunk(value);\n      } catch (err) {\n        throw err;\n      }\n    }\n    if (error) {\n      throw error;\n    }\n    return buffer;\n  } else {\n    throw new Error(`serial port not found`);\n  }\n};\n\nexport const sendCommand = async ({ reader, writer }: { reader: any, writer: any }, opt: any): Promise<Uint8Array> => {\n  const timeout = opt.timeout || 0;\n  let responseData: Uint8Array | null = null;\n  let responseLength = 0;\n\n  if (opt.responseData && opt.responseData.length > 0) {\n    responseData = new Uint8Array(opt.responseData);\n  }\n  if (responseData) {\n    responseLength = responseData.length;\n  }\n  if (opt.responseLength) {\n    responseLength = opt.responseLength;\n  }\n  let cmd = opt.cmd;\n  if (cmd instanceof Array) {\n    cmd = new Uint8Array([...cmd, ...[Statics.Sync_CRC_EOP]]);\n  }\n  if (reader && writer) {\n    try {\n      writer.write(cmd);\n    } catch(err) {\n      throw new Error(`Sending ${cmd.toString()} : ${(err as any).message}`);\n    }\n    try {\n      const data = await receiveData(reader, timeout, responseLength);\n      if (responseData && !bufferEqual(data, responseData)) {\n        throw new Error(`${cmd} response mismatch: ${data.toString()}, ${responseData.toString()}`);\n      }\n      return data;\n    } catch (err: any) {\n      throw new Error(`Sending ${cmd.toString()}: ${err.message}`);\n    }\n  } else {\n    throw new Error(`serial port not found`);\n  }\n};\n","import { sendCommand } from './stk500-io';\nimport Statics from './constants';\n\nexport const sync = async (serial: any, attempts: number, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('sync');\n\n  const opt = {\n    cmd: [Statics.Cmnd_STK_GET_SYNC],\n    responseData: Statics.OK_RESPONSE,\n    timeout\n  };\n\n  let tries = 0;\n\n  while (tries <= attempts) {\n    tries += 1;\n    try {\n      const result = await sendCommand(serial, opt);\n      debug && console.log('sync complete', result, tries);\n      return result;\n    } catch (err) {\n      console.log(err);\n    }\n    if (tries <= attempts) {\n      debug && console.log(`failed! will try again (${tries})`);\n    }\n  }\n  throw new Error(`Sync failed after ${attempts} attempts`);\n};\n\nfunction uint8ArrayToHex(uint8Array: Uint8Array): string {\n  return Array.from(uint8Array) // Convert Uint8Array to a regular array\n      .map(byte => byte.toString(16).padStart(2, '0')) // Convert each byte to a 2-character hex string\n      .join(''); // Join all hex strings together\n}\n\nconst verifySignature = async (serial: any, signature: Uint8Array, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('verify signature');\n\n  const match = new Uint8Array([\n    Statics.Resp_STK_INSYNC,\n    ...signature,\n    Statics.Resp_STK_OK\n  ]);\n\n  const opt = {\n    cmd: [Statics.Cmnd_STK_READ_SIGN],\n    responseLength: match.length,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    if (data) {\n      debug && console.log('confirm signature', data, uint8ArrayToHex(data));\n    } else {\n      debug && console.log('confirm signature', 'no data');\n    }\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst getSignature = async (serial: any, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('get signature');\n\n  const opt = {\n    cmd: [Statics.Cmnd_STK_READ_SIGN],\n    responseLength: 5,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('getSignature', data);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst setOptions = async (serial: any, options: any, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('set device');\n  const opt = {\n    cmd: [\n      Statics.Cmnd_STK_SET_DEVICE,\n      options.devicecode || 0,\n      options.revision || 0,\n      options.progtype || 0,\n      options.parmode || 0,\n      options.polling || 0,\n      options.selftimed || 0,\n      options.lockbytes || 0,\n      options.fusebytes || 0,\n      options.flashpollval1 || 0,\n      options.flashpollval2 || 0,\n      options.eeprompollval1 || 0,\n      options.eeprompollval2 || 0,\n      options.pagesizehigh || 0,\n      options.pagesizelow || 0,\n      options.eepromsizehigh || 0,\n      options.eepromsizelow || 0,\n      options.flashsize4 || 0,\n      options.flashsize3 || 0,\n      options.flashsize2 || 0,\n      options.flashsize1 || 0\n    ],\n    responseData: Statics.OK_RESPONSE,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('setOptions', data);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst enterProgrammingMode = async (serial: any, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('send enter programming mode');\n  const opt = {\n    cmd: [Statics.Cmnd_STK_ENTER_PROGMODE],\n    responseData: Statics.OK_RESPONSE,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('sent enter programming mode', data);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst loadAddress = async (serial: any, useaddr: number, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('load address');\n  const addr_low = useaddr & 0xff;\n  const addr_high = (useaddr >> 8) & 0xff;\n  const opt = {\n    cmd: [\n      Statics.Cmnd_STK_LOAD_ADDRESS,\n      addr_low,\n      addr_high\n    ],\n    responseData: Statics.OK_RESPONSE,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('loaded address', data);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst loadPage = async (serial: any, writeBytes: Uint8Array, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('load page');\n  const bytes_low = writeBytes.length & 0xff;\n  const bytes_high = writeBytes.length >> 8;\n\n  const cmd = new Uint8Array([\n    Statics.Cmnd_STK_PROG_PAGE, bytes_high, bytes_low, 0x46,\n    ...writeBytes,\n    Statics.Sync_CRC_EOP\n  ]);\n\n  const opt = {\n    responseData: Statics.OK_RESPONSE,\n    cmd,\n    timeout\n  };\n\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('loaded page', data);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst upload = async (serial: any, hex: Uint8Array, options: any): Promise<boolean> => {\n  const { timeout, debug, pageSize } = options;\n\n  debug && console.log('program');\n  let pageaddr = 0;\n  let writeBytes;\n  let useaddr;\n\n  try {\n    while (pageaddr < hex.length) {\n      debug && console.log('program page');\n      useaddr = pageaddr >> 1;\n      await loadAddress(serial, useaddr, options);\n      writeBytes = hex.slice(pageaddr, (hex.length > pageSize ? (pageaddr + pageSize) : hex.length - 1));\n      await loadPage(serial, writeBytes, options);\n      debug && console.log('programmed page');\n      pageaddr = pageaddr + writeBytes.length;\n      await new Promise((resolve) => setTimeout(resolve, 4));\n      debug && console.log('page done');\n    }\n  } catch (err) {\n    throw err;\n  }\n  debug && console.log('upload done');\n  return true;\n};\n\nconst exitProgrammingMode = async (serial: any, { timeout, debug }: any): Promise<any> => {\n  debug && console.log('send leave programming mode');\n  const opt = {\n    cmd: [Statics.Cmnd_STK_LEAVE_PROGMODE],\n    responseData: Statics.OK_RESPONSE,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('sent leave programming mode', data);\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nconst verify = async (serial: any, hex: Uint8Array, options: any): Promise<boolean> => {\n  const { timeout, debug, pageSize } = options;\n\n  debug && console.log('verify');\n  let pageaddr = 0;\n  let writeBytes;\n  let useaddr;\n\n  try {\n    while (pageaddr < hex.length) {\n      debug && console.log('verify page');\n      useaddr = pageaddr >> 1;\n      await loadAddress(serial, useaddr, options);\n      writeBytes = hex.slice(pageaddr, (hex.length > pageSize ? (pageaddr + pageSize) : hex.length - 1));\n      await verifyPage(serial, writeBytes, options);\n      debug && console.log('verified page');\n      pageaddr = pageaddr + writeBytes.length;\n      await new Promise((resolve) => setTimeout(resolve, 4));\n      debug && console.log('page done');\n    }\n  } catch (err) {\n    throw err;\n  }\n  debug && console.log('verify done');\n  return true;\n};\n\nconst verifyPage = async (serial: any, writeBytes: Uint8Array, options: any): Promise<any> => {\n  const { pageSize, timeout, debug } = options;\n\n  debug && console.log('verify page');\n  const match = new Uint8Array([\n    Statics.Resp_STK_INSYNC,\n    ...writeBytes,\n    Statics.Resp_STK_OK\n  ]);\n  const size = writeBytes.length >= pageSize ? pageSize : writeBytes.length;\n  const opt = {\n    cmd: [\n      Statics.Cmnd_STK_READ_PAGE,\n      (size >> 8) & 0xff,\n      size & 0xff,\n      0x46\n    ],\n    responseLength: match.length,\n    timeout\n  };\n  try {\n    const data = await sendCommand(serial, opt);\n    debug && console.log('confirm page', data, uint8ArrayToHex(data));\n    return data;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport const bootload = async (serial: any, hex: Uint8Array, opt: any): Promise<boolean> => {\n  const parameters = {\n    pagesizehigh: (opt.pagesizehigh << 8 & 0xff),\n    pagesizelow: opt.pagesizelow & 0xff\n  };\n\n  try {\n    // send two dummy syncs like avrdude does\n    await sync(serial, 3, opt);\n    await sync(serial, 3, opt);\n    await sync(serial, 3, opt);\n    const sign = new Uint8Array(opt.signature);\n    await verifySignature(serial, sign, opt);\n    await setOptions(serial, parameters, opt);\n    await enterProgrammingMode(serial, opt);\n    await upload(serial, hex, opt);\n    await verify(serial, hex, opt);\n    await exitProgrammingMode(serial, opt);\n  } catch (err) {\n    throw err;\n  }\n  return true;\n};\n","import * as boardsHelper from './boards';\nimport { parseIntelHex } from './hex-parser';\nimport { bootload } from './stk500v1/stk500';\nimport { constants } from 'buffer';\n\ninterface SerialPort {\n  setSignals(signals: { requestToSend: boolean, dataTerminalReady: boolean }): void;\n  open(options: { baudRate: number }): Promise<void>;\n  close(): Promise<void>;\n  readable: ReadableStream;\n  writable: WritableStream;\n}\n\ninterface Serial {\n  port: SerialPort;\n  reader: ReadableStreamDefaultReader;\n  writer: WritableStreamDefaultWriter;\n}\n\ninterface FlashOptions {\n  debug?: boolean;\n  boardName?: string;\n  [key: string]: any;\n}\n\ninterface AvrBro {\n  isAvailable: () => boolean;\n  openSerial: (options?: { baudRate?: number, filters?: any }) => Promise<Serial | null>;\n  closeSerial: (serial: Serial) => Promise<void>;\n  parseHex: (buffer: Uint8Array) => Uint8Array;\n  flash: (serial: Serial, hexData: Uint8Array, options?: FlashOptions) => Promise<any>;\n  reset: (serial: Serial) => Promise<void>;\n  boardsHelper: typeof boardsHelper;\n}\n\n/**\n * Checks if the serial api is available\n */\nconst isAvailable = (): boolean => navigator && (navigator as any).serial;\n\n/**\n * Allow to parse/check hex file\n */\nconst parseHex = (buffer: Uint8Array): Uint8Array => {\n  const hex = parseIntelHex(buffer).data;\n  return hex;\n};\n\n/**\n * Open the connection with the serial port\n */\nconst openSerial = async (options: { baudRate?: number, filters?: any } = {}): Promise<Serial | null> => {\n  const {\n    baudRate = 57600,\n    filters = null\n  } = options;\n\n  // Request an Arduino from the user.\n  try {\n    let port;\n    if (filters) {\n      port = await (navigator as any).serial.requestPort(filters);\n    } else {\n      port = await (navigator as any).serial.requestPort();\n    }\n    await port.open({ baudRate });\n    const reader = port.readable.getReader();\n    const writer = port.writable.getWriter();\n    return { port, reader, writer };\n  } catch (e) {\n    console.log(e);\n  }\n  return null;\n};\n\n/**\n * Close the connection with the serial port\n */\nconst closeSerial = async ({ port, reader, writer }: Serial): Promise<void> => {\n  writer.releaseLock();\n  reader.releaseLock();\n  await port.close();\n};\n\nconst wait = (duration: number): Promise<void> => {\n  return new Promise((resolve) => setTimeout(resolve, duration));\n};\n\n/**\n * Reset board with cycle DTR\n */\nconst reset = async (serial: Serial): Promise<void> => {\n  serial.port.setSignals({ requestToSend: true, dataTerminalReady: true });\n  await wait(250);\n  serial.port.setSignals({ requestToSend: false, dataTerminalReady: false });\n  await wait(50);\n};\n\n/**\n * Flash the device connected on the given serial port with the given .hex file buffer.\n * Only works with stk500 version 1 for now...\n */\nconst flash = async (serial: Serial, hexData: Uint8Array, options?: FlashOptions): Promise<any> => {\n  if (!options) {\n    throw new Error(`I need options to do this!`);\n  }\n  const { debug, boardName, ...boardOptions } = options;\n  let props = { debug, ...boardOptions };\n  debug && console.log(`will flash .hex file on board...`);\n  if (boardName) {\n    const board = boardsHelper.getBoard(boardName);\n    props = { ...props, ...board };\n  }\n  if (!(props as any).name) {\n    throw new Error('Cannot find board name!');\n  }\n  try {\n    await reset(serial);\n    const flashResult = await bootload(serial, hexData, props);\n    debug && console.log(`flash complete successfully`);\n    return flashResult;\n  } catch (err) {\n    debug && console.log(`encountered errors during flash :(`);\n    throw err;\n  }\n};\n\nconst avrbro: AvrBro = {\n  isAvailable,\n  openSerial,\n  closeSerial,\n  parseHex,\n  flash,\n  reset,\n  boardsHelper\n};\n\nexport * from './stk500v1/constants';\nexport * from './stk500v1/stk500-io';\nexport * from './stk500v1/stk500';\nexport * from './hex-parser';\nexport * from './boards';\n\nexport { avrbro };\nexport default avrbro;\n"],"mappings":"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","names":[]}